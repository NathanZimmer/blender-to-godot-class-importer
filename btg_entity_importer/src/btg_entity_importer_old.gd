@tool
@icon("uid://cq0fqc6flo66b")
## Blender-to-Godot entity importer. Reads from an entity definition JSON and
## assigns The types/values of nodes in the Godot scene corresponding to the
## objects in Blender scene.
# TODO: Remove this
class_name BTGImporterOld extends Node3D

const AUTO_IMPORT_DELAY: int = 1

@export_group("Run BTG Import")
@export_tool_button("Import") var import = _import
@export_group("BTG Import Settings")
## Path to entity definition JSON generated by the Blender addon
@export var entity_definition_path: String = "":
    set(value):
        entity_definition_path = value
        file_update_time = FileAccess.get_modified_time(value)
# Whether or not import should run automatically when the above JSON is updated
@export var auto_import: bool = false:
    set(value):
        auto_import = value
        if not Engine.is_editor_hint():
            return
        if value:
            if entity_definition_path.is_empty():
                push_warning("Please populate `entity_definition_path` field!")
            timer.start()
        else:
            timer.stop()

var file_update_time: int = -1
var timer: Timer
## Keep track of nodes added to the scene so we can remove them for re-importing
var added_nodes: Array[Node] = []


func _init():
    if not Engine.is_editor_hint():
        return

    timer = Timer.new()
    timer.timeout.connect(_auto_import)
    timer.one_shot = false
    timer.wait_time = AUTO_IMPORT_DELAY
    add_child(timer)


func _ready():
    if not Engine.is_editor_hint():
        auto_import = false
        return

    auto_import = auto_import


func _auto_import():
    if not FileAccess.file_exists(entity_definition_path):
        return

    var update_time = FileAccess.get_modified_time(entity_definition_path)
    if file_update_time < update_time:
        file_update_time = update_time
        _import()


## Run import when button is pressed
func _import() -> void:
    if not auto_import and entity_definition_path.is_empty():
        push_warning("Please populate `entity_definition_path` field!")
        return

    var godot_import_file = FileAccess.open(entity_definition_path, FileAccess.READ)
    if godot_import_file == null:
        push_error(error_string(FileAccess.get_open_error()))
        return

    var import_text = godot_import_file.get_as_text()

    var json = JSON.new()
    json.parse(import_text)
    var entity_def = json.data

    for node in added_nodes:
        if node:
            node.free()
            node = null
    added_nodes.clear()

    var num_failures = 0
    for child in get_children():
        if child == timer:
            continue
        num_failures += BTGImporter.import_entities_from_def(entity_def, child, added_nodes)

    if num_failures == 0:
        print("Finished import with no failures!")
    else:
        print("Finished import with %d failures (see warnings)" % num_failures)

    # Note: The parent node is reset on reload
    for node in added_nodes:
        # node.get_parent().set_owner(get_owner())
        BTGImporter.recursive_set_owner(node, get_owner())
