@tool
@icon("res://addons/blender_to_godot_pipeline/icon.svg")
## Importer for Blender to Godot pipeline. Assigns Node types/values based on an entity import JSON.
class_name BTGImporter extends Node3D

@export_group("Run BTG Import")
## Run BTG import (This is a button)
@export var import: bool = false:
	set(value):
		_on_import_button_pressed()
		import = false

@export_group("BTG Import Settings")
## Path to import JSON generated by the Blender addon
@export var import_json: String = ""
## Handle assignment of custom types defind in your entity template JSON.
## Expected format: `Dictionary(String: Callable)`
@export var custom_hanlders: Dictionary


## Run import when button is pressed
func _on_import_button_pressed() -> void:
	if import_json.is_empty():
		push_warning("Please populate `import_json` field!")
		return

	var godot_import_file = FileAccess.open(import_json, FileAccess.READ)
	if godot_import_file == null:
		push_error(error_string(FileAccess.get_open_error()))
		return

	var import_text = godot_import_file.get_as_text()

	var json = JSON.new()
	json.parse(import_text)
	var entity_def = json.data

	_import_entities_from_def(entity_def, self)
	print('Success!')


## Recursively search through nodes and replace based on import JSON
func _import_entities_from_def(entity_def: Dictionary, node: Node3D):
	var node_name = node.name

	if node_name in entity_def:
		# Create new node and copy name and attributes
		var new_node = ClassDB.instantiate(entity_def[node_name]["class"])
		new_node.global_transform = node.global_transform
		new_node.name = node.name

		# Replace and free
		node.replace_by(new_node, true)
		node.free()
		node = new_node

		# Assign values
		var variables = entity_def[node_name]["variables"]
		for variable in variables:
			var type = variables[variable]["type"]
			var value = variables[variable]["value"]

			if type in ["int", "String", "bool", "float"]:
				node.set(variable, value)
			else:
				node.set(variable, _cast_to_type(value, type))

	# Recursively search children
	if node.get_children().is_empty():
		return
	for child in node.get_children():
		_import_entities_from_def(entity_def, child)


## Convert `value` to type `type`
func _cast_to_type(value, type: String):
	if type == "list":
		return str_to_var(value)
	if type == "Vector3":
		value = value.replace("(", "[")
		value = value.replace(")", "]")
		value = str_to_var(value)
		return Vector3(value[0], value[1], value[2])
	if type == "Vector3i":
		value = value.replace("(", "[")
		value = value.replace(")", "]")
		value = str_to_var(value)
		return Vector3i(value)
	if type in custom_hanlders:
		value = custom_hanlders[type].call(value)
	if type in ["int", "String", "bool", "float"]:
		return value

	push_error("Undefined non-primitive type conversion! Failed type: %s" % type)
	return null
